# ------------------------------------------------------------
# Compiler + global settings
# ------------------------------------------------------------
CC          := gcc
SRC_DIR     := src
BUILD_DIR   := build
BIN         := $(BUILD_DIR)/etherskies

# Compiler flags:
#  -std=c99 : C99 standard
#  -Wall -Wextra : warnings
#  -MMD -MP  : auto-generate dependency files
#  -Isrc/libs : include your project headers
#  -Isrc/jansson/src : include Jansson headers directly from its src folder
CFLAGS      := -std=c99 -Wall -Wextra -Werror -Wfatal-errors -MMD -MP -Ilib/jansson -Isrc/libs -Iincludes -Wno-format-truncation -g
JANSSON_CFLAGS := $(filter-out -Werror -Wfatal-errors,$(CFLAGS)) -w

# Linker flags and libraries
LDFLAGS     := -flto -Wl,--gc-sections
LIBS        := -lcurl


# ------------------------------------------------------------
# Source and object files
# ------------------------------------------------------------

# Find all project .c files under src/
SRC         := $(shell find -L $(SRC_DIR) -type f -name '*.c' ! -path "*/jansson/*")

# Map each .c to a .o file in the build directory
OBJ         := $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.o,$(SRC))

# Dependency files generated by -MMD
DEP         := $(OBJ:.o=.d)


# ------------------------------------------------------------
# Jansson integration
# ------------------------------------------------------------
# Only compile Jansson files inside lib/jansson/
JANSSON_SRC := $(shell find lib/jansson/ -maxdepth 1 -type f -name '*.c')
JANSSON_OBJ := $(patsubst lib/jansson/%.c,$(BUILD_DIR)/jansson/%.o,$(JANSSON_SRC))
OBJ         += $(JANSSON_OBJ)


# ------------------------------------------------------------
# Build rules
# ------------------------------------------------------------

.PHONY: all
all: $(BIN)
	@echo "Build complete."

$(BIN): $(OBJ)
	@$(CC) $(LDFLAGS) $(OBJ) -o $@ $(LIBS)

$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c
	@echo "Compiling $<..."
	@mkdir -p $(dir $@)
	@$(CC) $(CFLAGS) -c $< -o $@

$(BUILD_DIR)/jansson/%.o: lib/jansson/%.c
	@echo "Compiling Jansson $<..."
	@mkdir -p $(dir $@)
	@$(CC) $(JANSSON_CFLAGS) -c $< -o $@


# ------------------------------------------------------------
# Utilities
# ------------------------------------------------------------

.PHONY: run
run: $(BIN)
	./$(BIN)

.PHONY: clean
clean:
	@rm -rf $(BUILD_DIR) $(BIN)

.PHONY: format
format:
	find . -name '*.c' -o -name '*.h' -print0 | xargs -0 clang-format -i


# ------------------------------------------------------------
# GitHub Actions (act)
# ------------------------------------------------------------

.PHONY: workflow-build
workflow-build:
	DOCKER_HOST="$${DOCKER_HOST}" act push --job build \
       -P ubuntu-latest=catthehacker/ubuntu:act-latest

.PHONY: workflow-format
workflow-format:
	DOCKER_HOST="$${DOCKER_HOST}" act push --job format-check \
       -P ubuntu-latest=teeks99/clang-ubuntu:19

.PHONY: workflow
workflow: workflow-build workflow-format


# ------------------------------------------------------------
# Dependencies
# ------------------------------------------------------------
-include $(DEP)
